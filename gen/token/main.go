package main

import (
	"flag"
	"log"
	"os"
	"text/template"
)

var (
	packageName = flag.String("package", "schemalex", "name of package")
	fileName    = flag.String("file", "token.go", "name of file")
)

func main() {
	flag.Parse()
	if err := _main(); err != nil {
		log.Fatal(err)
	}
}

func _main() error {
	tmpl := `// generated by gen/token/main.go
package {{ .Package }}

type token int

const (
	ILLEAGAL token = iota
	EOF
	SPACE

	IDENT
	BACKTICK_IDENT
	DOUBLE_QUOTE_IDENT
	SINGLE_QUOTE_IDENT

	NUMBER

	LPAREN       // (
	RPAREN       // )
	COMMA        // ,
	SEMICORON    // ;
	DOT          // .
	SLASH        // /
	ASTERISK     // *
	DASH         // -
	PLUS         // +
	SINGLE_QUOTE // '
	DOUBLE_QUOTE // "
	EQUAL        // =

	COMMENT_IDENT // /*   */, --, #

	// keyword
	{{ range $keyword := .Keywords }}
	{{ $keyword }}{{ end }}
)

var keywordIdentMap = map[string]token{
	{{ range $keyword := .Keywords }}
	"{{ $keyword }}": {{ $keyword }},{{ end }}
}
`

	d := struct {
		Package  string
		Keywords []string
	}{
		Package: *packageName,
		Keywords: []string{
			"AUTO_INCREMENT",
			"AVG_ROW_LENGTH",
			"BIGINT",
			"BINARY",
			"BIT",
			"BLOB",
			"BTREE",
			"CHAR",
			"CHARACTER",
			"CHECK",
			"CHECKSUM",
			"COLLATE",
			"COMMENT",
			"COMPACT",
			"COMPRESSED",
			"CONNECTION",
			"CONSTRAINT",
			"CREATE",
			"CURRENT_TIMESTAMP",
			"DATA",
			"DATABASE",
			"DATE",
			"DATETIME",
			"DECIMAL",
			"DEFAULT",
			"DELAY_KEY_WRITE",
			"DIRECTORY",
			"DISK",
			"DOUBLE",
			"DROP",
			"DYNAMIC",
			"ENGINE",
			"ENUM",
			"EXISTS",
			"FIRST",
			"FIXED",
			"FLOAT",
			"FOREIGN",
			"FULLTEXT",
			"HASH",
			"IF",
			"INDEX",
			"INSERT_METHOD",
			"INT",
			"INTEGER",
			"KEY",
			"KEY_BLOCK_SIZE",
			"LAST",
			"LONGBLOB",
			"LONGTEXT",
			"MAX_ROWS",
			"MEDIUMBLOB",
			"MEDIUMINT",
			"MEDIUMTEXT",
			"MEMORY",
			"MIN_ROWS",
			"NO",
			"NOT",
			"NULL",
			"NUMERIC",
			"PACK_KEYS",
			"PASSWORD",
			"PRIMARY",
			"REAL",
			"REDUNDANT",
			"ROW_FORMAT",
			"SET",
			"SMALLINT",
			"SPARTIAL",
			"STATS_AUTO_RECALC",
			"STATS_PERSISTENT",
			"STATS_SAMPLE_PAGES",
			"STORAGE",
			"TABLE",
			"TABLESPACE",
			"TEMPORARY",
			"TEXT",
			"TIME",
			"TIMESTAMP",
			"TINYBLOB",
			"TINYINT",
			"TINYTEXT",
			"UNION",
			"UNIQUE",
			"UNSIGNED",
			"USE",
			"USING",
			"VARBINARY",
			"VARCHAR",
			"YEAR",
			"ZEROFILL",
		},
	}

	f, err := os.Create(*fileName)
	if err != nil {
		return err
	}
	defer f.Close()
	if err := template.Must(template.New("token.go").Parse(tmpl)).Execute(f, d); err != nil {
		return err
	}
	return nil
}
